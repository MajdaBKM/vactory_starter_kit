<?php

/**
 * @file
 * Module related hooks.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function vactory_quiz_theme($existing, $type, $theme, $path) {
  return [
    'node__vactory_quiz__full' => [
      'template' => 'full',
      'base hook' => 'node',
    ],
    'node__vactory_quiz__card' => [
      'template' => 'card',
      'base hook' => 'node',
    ],
    'node__vactory_quiz__teaser' => [
      'template' => 'teaser',
      'base hook' => 'node',
    ],
    'vactory_quiz_block' => [
      'template' => 'quiz-block',
      'variables' => [
        'content' => NULL,
      ],
    ],
    'vactory_quiz_answer_summary' => [
      'template' => 'vactory-quiz-answer-summary',
      'variables' => [
        'content' => NULL,
      ],
    ],
    'vactory_quiz_results' => [
      'template' => 'quiz-results',
      'variables' => [
        'content' => NULL,
      ],
    ],
    'quiz_answer_option' => [
      'template' => 'quiz-answer-option',
      'variables' => [
        'content' => NULL,
      ],
    ],
    'quiz_validate_answer' => [
      'template' => 'quiz-validate-answer',
      'variables' => [
        'content' => NULL,
      ],
    ],
    'quiz_correction' => [
      'template' => 'quiz-correction',
      'variables' => [
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_multiple_field_remove_button_field_types_alter().
 */
function vactory_quiz_multiple_field_remove_button_field_types_alter(array &$fieldTypes) {
  $fieldTypes[] = "vactory_quiz_question";
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
function vactory_quiz_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['widget']->getPluginId() === 'vactory_quiz_question_widget') {
    $element['#title'] = t('Question @num', ['@num' => $element['#delta'] + 1]);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_quiz_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node instanceof NodeInterface && $node->bundle() === 'vactory_quiz') {
    $variables['quiz_user_history'] = [];
    if (Drupal::moduleHandler()->moduleExists('vactory_quiz_history')) {
      $quiz_manager = Drupal::service('vactory_quiz.manager');
      $result = $quiz_manager->getQuizUserAttemptHistory($node->id(), Drupal::currentUser()->id());
      $variables['quiz_user_history'] = $result;
      $variables['quiz_perfect_mark'] = $quiz_manager->getPerfectMark($node->id());
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function vactory_quiz_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() === 'vactory_quiz' && $view->current_display === 'page_my_quiz') {
    if (Drupal::moduleHandler()->moduleExists('vactory_quiz_history')) {
      // Get current user passed quiz nids from quiz history.
      $query_prim = "SELECT quiz_nid FROM vactory_quiz_history where uid = :uid";
      $results = Drupal::database()->query(
        $query_prim, [
          ':uid' => Drupal::currentUser()->id(),
        ],
      )->fetchAll();
      $nids = [0];
      if (!empty($results)) {
        $nids = array_map(function ($result) {
          return $result->quiz_nid;
        }, $results);
      }
      $query->addWhere('', 'node_field_data.nid', $nids, 'IN');
    }
  }
}