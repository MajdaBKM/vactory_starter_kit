<?php

/**
 * @file
 * Module installation hooks.
 */

use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_install().
 */
function vactory_content_package_install($is_syncing) {
  $node_id_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Node machine name'))
    ->setDescription(t('A machine-readable name for the node.'))
    ->setRequired(TRUE)
    ->addConstraint('UniqueField')
    ->setSettings([
      'default_value' => '',
      'max_length' => 255,
      'text_processing' => 0,
    ]);
  $term_id_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Term machine name'))
    ->setDescription(t('A machine-readable name for the terms.'))
    ->setRequired(TRUE)
    ->addConstraint('UniqueField')
    ->setSettings([
      'default_value' => '',
      'max_length' => 255,
      'text_processing' => 0,
    ]);

  // Install node machine name new field.
  Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('node_id', 'node', 'vactory_content_package', $node_id_definition);
  // Install term machine name new field.
  Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('term_id', 'taxonomy_term', 'vactory_content_package', $term_id_definition);

  $database = \Drupal::service('database');
  $logger = \Drupal::logger('vactory_content_package');
  // Nodes.
  $sql = "SELECT nid from node_field_data ";
  $sql .= "WHERE  node_id IS NULL";

  $query = $database->query($sql);
  $result = $query->fetchAll(\PDO::FETCH_ASSOC);
  $node_count = count($result);

  $logger->debug("Process starting: updating {$node_count} nodes.");
  foreach ($result as $row) {
    $database->update('node_field_data')
      ->fields(['node_id' => uniqid()])
      ->condition('nid', $row['nid'])
      ->execute();
  }
  $logger->debug("Process finished: updating {$node_count} nodes.");

  // Terms.
  $sql = "SELECT tid from taxonomy_term_field_data ";
  $sql .= "WHERE  term_id IS NULL";

  $query = $database->query($sql);
  $result = $query->fetchAll(\PDO::FETCH_ASSOC);
  $term_count = count($result);

  $logger->debug("Process starting: updating {$term_count} terms.");
  foreach ($result as $row) {
    $database->update('taxonomy_term_field_data')
      ->fields(['term_id' => uniqid()])
      ->condition('tid', $row['tid'])
      ->execute();
  }
  $logger->debug("Process finished: updating {$node_count} terms.");
}

/**
 * Implements hook_cron().
 */
function vactory_content_package_update_form_display($entity_type, $field_name) {
  // Update existing form displays.
  $bundles = \Drupal::service('entity_type.bundle.info')
    ->getBundleInfo($entity_type);
  foreach ($bundles as $bundle => $infos) {
    $entity_form_display = Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('node.' . $bundle . '.default');
    if ($entity_form_display) {
      $entity_form_display->setComponent($field_name, [
        'type' => 'string_textfield_with_counter',
      ])->save();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function vactory_content_package_uninstall($is_syncing) {
  field_cron();
}

/**
 * Add node_content_package_exclude field.
 */
function vactory_content_package_update_9571() {
  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Yes, exclude this entity from the content package (import/export).'))
    ->setTranslatable(FALSE)
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'settings' => [
        'display_label' => TRUE,
      ],
    ])
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('node_content_package_exclude', 'node', 'node', $storage_definition);
}

/**
 * Add block_content_package_exclude field.
 */
function vactory_content_package_update_9572() {
  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Yes, exclude this entity from the content package (import/export).'))
    ->setTranslatable(FALSE)
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'settings' => [
        'display_label' => TRUE,
      ],
    ])
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('block_content_package_exclude', 'block_content', 'block_content', $storage_definition);

}
