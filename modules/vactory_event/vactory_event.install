<?php

/**
 * @file
 * Install file.
 */

use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_install().
 */
function vactory_event_install() {

  // Create page that contains news listing DF.
  $widget_id = 'vactory_event:list';
  $widget_settings = \Drupal::service('vactory_dynamic_field.vactory_provider_manager')->loadSettings($widget_id);
  $df_default_value = $widget_settings['fields']['collection']['options']['#default_value'] ?? '';
  $component = [];
  $paragraph = NULL;
  if (isset($df_default_value)) {
    $component['0']['collection'] = $df_default_value;
    $paragraph_data = [
      "type" => "vactory_component",
      "field_vactory_title" => 'Event listing',
      "field_vactory_component" => [
        "widget_id" => $widget_id,
        "widget_data" => json_encode($component),
      ],
    ];
    $paragraph = Paragraph::create($paragraph_data);
    $paragraph->save();
  }
  else {
    \Drupal::logger('vactory_event')->warning('Listing page : The paragraph was not added because the widget settings do not have the expected structure.');
  }

  $node = [
    'type' => 'vactory_page',
    'status' => 1,
    'title' => 'Events',
  ];

  if ($paragraph instanceof Paragraph) {
    $node['field_vactory_paragraphs'] = [
      'target_id' => $paragraph->id(),
      'target_revision_id' => \Drupal::entityTypeManager()
        ->getStorage('paragraph')
        ->getLatestRevisionId($paragraph->id()),
    ];
  }

  $node_entity = Node::create($node);
  $node_entity->save();

  $menu_link = MenuLinkContent::create([
    'title' => 'Events',
    'link' => ['uri' => 'internal:/node/' . $node_entity->id()],
    'menu_name' => 'main',
  ]);
  $menu_link->save();

  // Add three-columns DF to homepage.
  $three_columns_widget_id = 'vactory_event:three-columns';
  $three_columns_widget_settings = \Drupal::service('vactory_dynamic_field.vactory_provider_manager')->loadSettings($three_columns_widget_id);
  $df_default_value = $three_columns_widget_settings['fields']['collection']['options']['#default_value'] ?? '';
  $component = [];
  if (
    isset($df_default_value)
    && $three_columns_widget_settings['fields']['title']
    && $three_columns_widget_settings['fields']['description']
    && $three_columns_widget_settings['fields']['link']
  ) {
    $component['0']['collection'] = $df_default_value;
    $component['0']['title'] = 'Event three columns';
    $component['0']['description']['value'] = '';
    $component['0']['link']['title'] = 'See more';
    $component['0']['link']['url'] = '/node/' . $node_entity->id();

    $paragraph = [
      "type" => "vactory_component",
      "field_vactory_title" => 'Event three columns',
      "field_vactory_component" => [
        "widget_id" => $three_columns_widget_id,
        "widget_data" => json_encode($component),
      ],
    ];
    $paragraph = Paragraph::create($paragraph);
    $paragraph->save();
    $homepage = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
      'type'     => 'vactory_page',
      'title'    => 'Homepage',
    ]);
    $homepage = reset($homepage);
    $homepage->field_vactory_paragraphs[] = [
      'target_id' => $paragraph->id(),
      'target_revision_id' => \Drupal::entityTypeManager()
        ->getStorage('paragraph')
        ->getLatestRevisionId($paragraph->id()),
    ];
    $homepage->save();
  }
  else {
    \Drupal::logger('vactory_event')
      ->warning('Three columns block : The paragraph was not added because the widget settings do not have the expected structure.');
  }

}
